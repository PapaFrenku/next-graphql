import Head from "next/head";
import React, { useEffect, useMemo } from "react";
import {
  Product as ProductType,
  TopLevelCategory,
  TopPageEntity,
} from "../generated/types";
import styles from "../styles/Home.module.scss";
import { withLayout } from "../components/layout/Layout";
import { Menu } from "../context/app.context";
import { Htag } from "../components/Htag";
import TrophyIcon from "../assets/images/trophy.svg";
import { ReactSVG } from "react-svg";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../redux/store";
import { getProduct, getProducts } from "../redux/product";
import { getTopPageByAlias } from "../redux/topPageSlice";
import _, { groupBy, map, take } from "lodash";
import ProductsTable from "../components/ProductsTable";
import { motion } from "framer-motion";
import { useRouter } from "next/router";

type HomeProps = {
  menu: Menu;
  firstСategories: TopLevelCategory[];
};

const firstCategories = {
  [TopLevelCategory.Courses]: "Курсы",
  [TopLevelCategory.Services]: "Сервисы",
  [TopLevelCategory.Books]: "Книги",
};

const headTableColumnsByFirstCategory = {
  [TopLevelCategory.Courses]: [
    'ДЛИТЕЛЬНОСТЬ',
    'ЦЕНА',
    'РАССРОЧКА',
    'РЕЙТИНГ'
  ],
  [TopLevelCategory.Services]: [
    'ФОРМА ОПЛАТЫ',
    'БЕСПЛАТНЫЙ ДОСТУП',
    'СТОИМОСТЬ',
    'РЕЙТИНГ'
  ],
  [TopLevelCategory.Books]: [
    'ДЛИТЕЛЬНОСТЬ',
    'ЦЕНА',
    'РАССРОЧКА',
    'РЕЙТИНГ'
  ],
};

const Home: React.FC<HomeProps> = (props) => {
  const dispatch = useDispatch();
  const products = useSelector((state: RootState) => state.products.products);
  const router = useRouter();

  useEffect(() => {
    dispatch(getProducts());
  }, []);

  const productsGroupedByCategory = useMemo(() => {
    return groupBy(products, "firstCategory");
  }, [products]);

  const renderServiceProductFields = (i: number, product: ProductType) : string | number | undefined => {
    const fields: {[x: number]: string | number} = {
      1: product.characteristics?.find(i => i?.name === "Форма оплаты")?.value || 'Нет данных',
      2: product.characteristics?.find(i => i?.name === "Бесплатная весрия")?.value || 'Нет данных',
      3: product.price,
    };

    return fields[i];
  };

  const renderCourseProductFields = (i: number, product: ProductType) : string | number | undefined => {
    const fields: {[x: number]: string | number} = {
      1: '3 месяца',
      2: product.price,
      3: product.credit,
    };

    return fields[i];
  };

  const renderProductField = (c: string, i: number, item: ProductType): string | number | undefined => {
    switch(c) {
      case TopLevelCategory.Courses:
          return renderCourseProductFields(i, item);
        case TopLevelCategory.Services:
          return renderServiceProductFields(i, item);
        default: renderCourseProductFields(i, item);
    }
  };


  return (
    <motion.div initial="initial" animate="enter" exit="exit" variants={{ exit: { transition: { opacity: 0 } } }} className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.head}>
          <div className={styles.icon}>
            <ReactSVG width="40px" height="40px" src={TrophyIcon.src} />
          </div>
          <Htag className={styles.pageTitle} tag="h1">
            Популярные Курсы, Сервисы, Книги
          </Htag>
        </div>
        <div>
          {Object.keys(productsGroupedByCategory).map((item) => {
            return (
              <ProductsTable 
                headTableColumns={headTableColumnsByFirstCategory[(item as TopLevelCategory)]}
                title={`${firstCategories[(item as TopLevelCategory)]}`}
                products={_.sortBy(_.take(productsGroupedByCategory[item], 5), 'reviewAvg').reverse()}
                topLevelCategory={(item as TopLevelCategory)}
                renderProductFields={
                  (i, product) => {
                    return renderProductField(item, i, product);
                  }
                }
                productOnClick={(id) => {
                  router.push(`/products/${id}`);
                }}
              /> 
            );
          })}
        </div>
      </main>
    </motion.div>
  );
};

export default withLayout(Home);
